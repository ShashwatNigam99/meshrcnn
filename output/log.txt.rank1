[07/25 21:43:23] detectron2 INFO: Rank of current process: 1. World size: 4
[07/25 21:43:24] detectron2 INFO: Environment info:
------------------------  ---------------------------------------------------------------------------------------------
sys.platform              linux
Python                    3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 19:07:31) [GCC 7.3.0]
numpy                     1.18.5
detectron2                0.1.3 @/home/anurag.sahu/anaconda3/envs/meshpip/lib/python3.6/site-packages/detectron2
detectron2 compiler       GCC 7.3
detectron2 CUDA compiler  10.1
detectron2 arch flags     sm_35, sm_37, sm_50, sm_52, sm_60, sm_61, sm_70, sm_75
DETECTRON2_ENV_MODULE     <not set>
PyTorch                   1.5.0+cu101 @/home/anurag.sahu/anaconda3/envs/meshpip/lib/python3.6/site-packages/torch
PyTorch debug build       False
CUDA available            True
GPU 0,1,2,3               GeForce RTX 2080 Ti
CUDA_HOME                 /usr/local/cuda
NVCC                      Cuda compilation tools, release 10.2, V10.2.89
Pillow                    7.2.0
torchvision               0.6.0+cu101 @/home/anurag.sahu/anaconda3/envs/meshpip/lib/python3.6/site-packages/torchvision
torchvision arch flags    sm_35, sm_50, sm_60, sm_70, sm_75
fvcore                    0.1.1.post20200704
cv2                       4.2.0
------------------------  ---------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_INTERNAL_THREADPOOL_IMPL -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[07/25 21:43:24] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pix3d/custom_config_ada.yaml', dist_url='tcp://127.0.0.1:50876', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=[], resume=False)
[07/25 21:43:24] detectron2 INFO: Contents of args.config_file=configs/pix3d/custom_config_ada.yaml:
_BASE_: "MESH-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "meshrcnn://coco_init_0719.pth" # "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  VOXEL_ON: True
  MESH_ON: True
  ZPRED_ON: True
  VIS_MINIBATCH: True
  RESNETS:
    DEPTH: 50
  RPN:
    IOU_THRESHOLDS: [0.2, 0.5, 0.7]
    IOU_LABELS: [-1, 0, -1, 1]
    SMOOTH_L1_BETA: 0.111
  ROI_HEADS:
    NAME: "MeshRCNNROIHeads"
    BATCH_SIZE_PER_IMAGE: 64
    NUM_CLASSES: 2 # Number of foreground classes
    IOU_THRESHOLDS: [0.2, 0.5]
    IOU_LABELS: [-1, 0, 1]
  ROI_BOX_HEAD:
    SMOOTH_L1_BETA: 1.0
  ROI_Z_HEAD:
    NAME: "FastRCNNFCHead"
    Z_REG_WEIGHT: 1.0
    SMOOTH_L1_BETA: 1.0
  ROI_MASK_HEAD:
    NAME: "MaskRCNNConvUpsampleHead"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    NUM_CONV: 4
  ROI_VOXEL_HEAD:
    NAME: "VoxelRCNNConvUpsampleHead"
    POOLER_RESOLUTION: 12
    POOLER_SAMPLING_RATIO: 2
    NUM_CONV: 4
    NUM_DEPTH: 24
    CLS_AGNOSTIC_VOXEL: True
    LOSS_WEIGHT: 3.0
    CUBIFY_THRESH: 0.2
  ROI_MESH_HEAD:
    NAME: "MeshRCNNGraphConvHead"
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    NUM_STAGES: 3
    NUM_GRAPH_CONVS: 3
    GRAPH_CONV_DIM: 128
    GRAPH_CONV_INIT: "normal"
    GT_COORD_THRESH: 5.0
    CHAMFER_LOSS_WEIGHT: 1.0
    NORMALS_LOSS_WEIGHT: 0.1
    EDGE_LOSS_WEIGHT: 1.0
DATASETS:
  TRAIN: ("pix3d_s1_train",)
  # TEST: ("pix3d_train",)
SOLVER:
  IMS_PER_BATCH: 8
  BASE_LR: 0.02
  WEIGHT_DECAY: 0.0001
  STEPS: (8000, 10000)
  MAX_ITER: 11000
  WARMUP_ITERS: 1000
  WARMUP_FACTOR: 0.1

[07/25 21:43:24] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: False
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('pix3d_test',)
  TRAIN: ('pix3d_s1_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  MESH_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlign
    SMOOTH_L1_BETA: 1.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 64
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [-1, 0, 1]
    IOU_THRESHOLDS: [0.2, 0.5]
    NAME: MeshRCNNROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 2
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlign
  ROI_MESH_HEAD:
    CHAMFER_LOSS_WEIGHT: 1.0
    EDGE_LOSS_WEIGHT: 1.0
    GRAPH_CONV_DIM: 128
    GRAPH_CONV_INIT: normal
    GT_COORD_THRESH: 5.0
    GT_NUM_SAMPLES: 5000
    ICO_SPHERE_LEVEL: -1
    NAME: MeshRCNNGraphConvHead
    NORMALS_LOSS_WEIGHT: 0.1
    NUM_GRAPH_CONVS: 3
    NUM_STAGES: 3
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlign
    PRED_NUM_SAMPLES: 5000
  ROI_VOXEL_HEAD:
    CLS_AGNOSTIC_VOXEL: True
    CONV_DIM: 256
    CUBIFY_THRESH: 0.2
    LOSS_WEIGHT: 3.0
    NAME: VoxelRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    NUM_DEPTH: 24
    POOLER_RESOLUTION: 12
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlign
  ROI_Z_HEAD:
    CLS_AGNOSTIC_Z_REG: False
    FC_DIM: 1024
    NAME: FastRCNNFCHead
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlign
    SMOOTH_L1_BETA: 1.0
    Z_REG_WEIGHT: 1.0
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [-1, 0, -1, 1]
    IOU_THRESHOLDS: [0.2, 0.5, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.111
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  VIS_MINIBATCH: True
  VOXEL_ON: True
  WEIGHTS: meshrcnn://coco_init_0719.pth
  ZPRED_ON: True
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  BASE_LR: 0.02
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 11000
  MOMENTUM: 0.9
  NESTEROV: False
  STEPS: (8000, 10000)
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[07/25 21:43:24] detectron2.utils.env INFO: Using a generated random seed 24171643
[07/25 21:43:25] detectron2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): MeshRCNNROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=2, aligned=False)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=2, aligned=False)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=2, aligned=False)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=2, aligned=False)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=3, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=8, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=2, aligned=False)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=2, aligned=False)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=2, aligned=False)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=2, aligned=False)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
    (z_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=2, aligned=False)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=2, aligned=False)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=2, aligned=False)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=2, aligned=False)
      )
    )
    (z_head): FastRCNNFCHead(
      (z_fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (z_fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (z_pred): Linear(in_features=1024, out_features=2, bias=True)
    )
    (voxel_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(12, 12), spatial_scale=0.25, sampling_ratio=2, aligned=False)
        (1): ROIAlign(output_size=(12, 12), spatial_scale=0.125, sampling_ratio=2, aligned=False)
        (2): ROIAlign(output_size=(12, 12), spatial_scale=0.0625, sampling_ratio=2, aligned=False)
        (3): ROIAlign(output_size=(12, 12), spatial_scale=0.03125, sampling_ratio=2, aligned=False)
      )
    )
    (voxel_head): VoxelRCNNConvUpsampleHead(
      (voxel_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (voxel_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (voxel_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (voxel_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
    )
    (mesh_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=2, aligned=False)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=2, aligned=False)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=2, aligned=False)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=2, aligned=False)
      )
    )
    (mesh_head): MeshRCNNGraphConvHead(
      (stages): ModuleList(
        (0): MeshRefinementStage(
          (bottleneck): Linear(in_features=256, out_features=128, bias=True)
          (verts_offset): Linear(in_features=131, out_features=3, bias=True)
          (gconvs): ModuleList(
            (0): GraphConv(131 -> 128, directed=False)
            (1): GraphConv(131 -> 128, directed=False)
            (2): GraphConv(131 -> 128, directed=False)
          )
        )
        (1): MeshRefinementStage(
          (bottleneck): Linear(in_features=256, out_features=128, bias=True)
          (verts_offset): Linear(in_features=131, out_features=3, bias=True)
          (gconvs): ModuleList(
            (0): GraphConv(259 -> 128, directed=False)
            (1): GraphConv(131 -> 128, directed=False)
            (2): GraphConv(131 -> 128, directed=False)
          )
        )
        (2): MeshRefinementStage(
          (bottleneck): Linear(in_features=256, out_features=128, bias=True)
          (verts_offset): Linear(in_features=131, out_features=3, bias=True)
          (gconvs): ModuleList(
            (0): GraphConv(259 -> 128, directed=False)
            (1): GraphConv(131 -> 128, directed=False)
            (2): GraphConv(131 -> 128, directed=False)
          )
        )
      )
    )
  )
)
[07/25 21:43:25] detectron2.data.detection_utils INFO: TransformGens used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[07/25 21:43:25] meshrcnn.data.meshrcnn_transforms INFO: Loading models from pix3d_s1_train...
[07/25 21:43:25] meshrcnn.data.meshrcnn_transforms INFO: Unique objects loaded: 7
[07/25 21:43:25] meshrcnn.data.datasets.pix3d INFO: Loaded 14 images in COCO format from datasets/pix3d/pix3d_s1_train.json
[07/25 21:43:25] detectron2.data.build INFO: Removed 0 images with no usable annotations. 14 images left.
[07/25 21:43:25] detectron2.data.build INFO: Distribution of instances among all 7 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|    BoxA    | 2            |    BoxB    | 2            |    BoxC    | 2            |
|    BoxD    | 2            |    BoxF    | 2            |    BoxH    | 2            |
|   RackA    | 2            |            |              |            |              |
|   total    | 14           |            |              |            |              |[0m
[07/25 21:43:25] detectron2.data.common INFO: Serializing 14 elements to byte tensors and concatenating them all ...
[07/25 21:43:25] detectron2.data.common INFO: Serialized dataset takes 0.01 MiB
[07/25 21:43:25] detectron2.data.build INFO: Using training sampler TrainingSampler
[07/25 21:43:31] fvcore.common.checkpoint INFO: Loading checkpoint from meshrcnn://coco_init_0719.pth
[07/25 21:43:31] fvcore.common.file_io INFO: URL https://dl.fbaipublicfiles.com/meshrcnn/pix3d/coco_init_0719.pth cached in /home/anurag.sahu/.torch/fvcore_cache/meshrcnn/pix3d/coco_init_0719.pth
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.stem.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.0.shortcut.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.0.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.0.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.0.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.1.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.1.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.1.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.2.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.2.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.2.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.0.shortcut.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.0.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.0.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.0.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.1.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.1.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.1.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.2.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.2.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.2.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.3.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.3.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.3.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.0.shortcut.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.0.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.0.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.0.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.1.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.1.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.1.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.2.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.2.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.2.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.3.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.3.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.3.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.4.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.4.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.4.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.5.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.5.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.5.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.0.shortcut.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.0.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.0.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.0.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.1.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.1.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.1.conv3.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.2.conv1.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.2.conv2.norm is upgraded to version 3.
[07/25 21:43:31] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.2.conv3.norm is upgraded to version 3.
[07/25 21:43:31] fvcore.common.checkpoint INFO: Some model parameters or buffers are not found in the checkpoint:
  [34mroi_heads.mesh_head.stages.2.gconvs.1.w0.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.1.gconvs.1.w0.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.1.verts_offset.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.1.gconvs.0.w1.{weight, bias}[0m
  [34mroi_heads.voxel_head.deconv.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.1.bottleneck.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.2.gconvs.2.w0.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.2.verts_offset.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.2.gconvs.1.w1.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.2.gconvs.2.w1.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.1.gconvs.0.w0.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.0.gconvs.1.w1.{bias, weight}[0m
  [34mroi_heads.voxel_head.voxel_fcn1.{bias, weight}[0m
  [34mroi_heads.voxel_head.voxel_fcn4.{bias, weight}[0m
  [34mroi_heads.z_head.z_pred.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.1.gconvs.1.w1.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.0.gconvs.2.w0.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.0.gconvs.2.w1.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.1.gconvs.2.w1.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.0.bottleneck.{bias, weight}[0m
  [34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
  [34mroi_heads.voxel_head.voxel_fcn2.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.1.gconvs.2.w0.{weight, bias}[0m
  [34mroi_heads.voxel_head.predictor.{weight, bias}[0m
  [34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
  [34mroi_heads.z_head.z_fc1.{bias, weight}[0m
  [34mroi_heads.mesh_head.stages.2.gconvs.0.w1.{weight, bias}[0m
  [34mroi_heads.z_head.z_fc2.{weight, bias}[0m
  [34mroi_heads.mask_head.predictor.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.0.gconvs.1.w0.{bias, weight}[0m
  [34mroi_heads.voxel_head.voxel_fcn3.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.2.gconvs.0.w0.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.2.bottleneck.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.0.gconvs.0.w0.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.0.verts_offset.{weight, bias}[0m
  [34mroi_heads.mesh_head.stages.0.gconvs.0.w1.{weight, bias}[0m
[07/25 21:43:31] detectron2.engine.train_loop INFO: Starting training from iteration 0
